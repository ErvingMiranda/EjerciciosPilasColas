using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

namespace PilaDePalabras
{
    public partial class Form1 : Form
    {
        private const int MAX = 5;
        private readonly Stack<string> _pila = new Stack<string>();

        public Form1()
        {
            InitializeComponent();
            ActualizarUI();
        }

        // --- Eventos de UI ---
        private void txtPalabra_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                e.SuppressKeyPress = true; // evita beep y salto de foco
                btnAgregar.PerformClick();
            }
        }

        private void btnAgregar_Click(object sender, EventArgs e)
        {
            if (_pila.Count >= MAX)
            {
                MostrarResultado("La pila ya contiene 5 palabras. Usa 'Mostrar pila' o 'Eliminar última (Pop)'.", Color.DarkGoldenrod);
                return;
            }

            string palabra = (txtPalabra.Text ?? string.Empty).Trim();

            if (palabra.Length == 0)
            {
                MostrarResultado("Escribe una palabra antes de agregar.", Color.DarkGoldenrod);
                txtPalabra.Focus();
                return;
            }

            _pila.Push(palabra);
            txtPalabra.Clear();
            txtPalabra.Focus();
            MostrarResultado($"Se agregó: \"{palabra}\"", Color.DimGray);
            ActualizarUI();
        }

        private void btnMostrar_Click(object sender, EventArgs e)
        {
            if (_pila.Count == 0)
            {
                MostrarResultado("La pila está vacía. Agrega palabras para mostrar el orden inverso.", Color.IndianRed);
                return;
            }

            RenderResultadoLIFO();
        }

        private void btnPop_Click(object sender, EventArgs e)
        {
            if (_pila.Count == 0)
            {
                MostrarResultado("La pila está vacía. No hay elementos para eliminar.", Color.IndianRed);
                return;
            }

            string eliminado = _pila.Pop();
            MostrarResultado($"Se eliminó (Pop): \"{eliminado}\"", Color.DarkSlateBlue);
            ActualizarUI();
            // opcional: refrescar la vista si ya se había mostrado
            RenderResultadoLIFO();
        }

        private void btnLimpiar_Click(object sender, EventArgs e)
        {
            _pila.Clear();
            txtPalabra.Clear();
            txtPalabra.Focus();
            MostrarResultado("Pila reiniciada.", Color.DimGray);
            ActualizarUI();
        }

        private void btnEnunciado_Click(object sender, EventArgs e)
        {
            var sb = new StringBuilder();
            sb.AppendLine("Ejercicio 2: Pila de Palabras");
            sb.AppendLine("Enunciado: Desarrolle un programa que utilice una pila para almacenar palabras y luego las muestre en orden inverso al que fueron ingresadas.");
            sb.AppendLine();
            sb.AppendLine("Problema a resolver:");
            sb.AppendLine("1) Crear una pila de tipo cadena (string).");
            sb.AppendLine("2) Solicitar al usuario que ingrese cinco palabras.");
            sb.AppendLine("3) Insertar las palabras en la pila una por una.");
            sb.AppendLine("4) Mostrar las palabras almacenadas en orden inverso (última palabra ingresada, primera mostrada).");
            sb.AppendLine("5) Mostrar un mensaje si la pila está vacía.");
            sb.AppendLine("6) Permitir al usuario eliminar una palabra de la pila y mostrar el resultado final.");
            MessageBox.Show(sb.ToString(), "Enunciado", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        // --- Utilidades de UI ---
        private void ActualizarUI()
        {
            lblContador.Text = $"({_pila.Count}/{MAX}) {(_pila.Count < MAX ? "Ingrese palabras" : "Límite alcanzado")}";

            // Mantener Agregar siempre habilitado para poder mostrar el mensaje de límite alcanzado
            btnMostrar.Enabled = _pila.Count > 0;
            btnPop.Enabled = _pila.Count > 0;

            // Pista en el texto de resultado
            if (_pila.Count == 0)
            {
                lblResultado.Text = "Resultado (LIFO):\r\n—";
                lblResultado.ForeColor = Color.DimGray;
            }
        }

        private void RenderResultadoLIFO()
        {
            if (_pila.Count == 0)
            {
                lblResultado.Text = "Resultado (LIFO):\r\n—";
                lblResultado.ForeColor = Color.DimGray;
                return;
            }

            var arr = _pila.ToArray(); // LIFO: cima primero
            var sb = new StringBuilder();
            sb.AppendLine("Resultado (LIFO):");
            for (int i = 0; i < arr.Length; i++)
            {
                // i+1 muestra numeración, arr[i] es el orden inverso de ingreso
                sb.AppendLine($"{i + 1}) {arr[i]}");
            }
            lblResultado.Text = sb.ToString();
            lblResultado.ForeColor = Color.ForestGreen;
        }

        private void MostrarResultado(string mensaje, Color color)
        {
            lblResultado.Text = mensaje;
            lblResultado.ForeColor = color;
        }
    }
}
